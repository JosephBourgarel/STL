import numpy as np
import marimo as mo
import sdf
import meshio

np.seterr(over="ignore")  # ü©π deal with a meshio false warning


from sdf import Sphere, Box, Cylinder
from sdf import X, Y, Z
from sdf import intersection, union, orient, difference


square_triangles = np.array(
    [
        [[0.0, 0.0, 0.0], [1.0, 0.0, 0.0], [0.0, 1.0, 0.0]],
        [[1.0, 1.0, 0.0], [0.0, 1.0, 0.0], [1.0, 0.0, 0.0]],
    ],
    dtype=np.float32,
)

with open("data/cube.stl", mode="rt", encoding="us-ascii") as cube_file:
    cube_stl = cube_file.read()
with open("data/teapot.stl", mode="rt", encoding="us-ascii") as teapot_file:
    teapot_stl = teapot_file.read()
with open("data/bunny.obj", mode="rt", encoding="us-ascii") as bunny_file:
    bunny = bunny_file.read()


def norme(vect):
    norme = (vect[0]**2 + vect[1]**2 + vect[2]**2)**(1/2)
    return norme

def vect_prod(v1, v2, normalize = True):
    prod = np.zeros(3)
    prod[0] = v1[1]*v2[2] - v1[2]*v2[1]
    prod[1] = v1[2]*v2[0] - v1[0]*v2[2]
    prod[2] = v1[0]*v2[1] - v1[1]*v2[0]
    if normalize:
        prod = 1/(norme(prod))*prod
    return prod


def scal_prod(v1, v2):
    return v1[0]*v2[0] + v1[1]*v2[1] + v1[2]*v2[2]


def make_normals(triangles):
    (n, m, p) = triangles.shape
    normals = np.zeros((n, 3), dtype= np.float32)
    for i in range(n):
        normals[i, 0] = vect_prod(triangles[i, 1] - triangles[i, 0],triangles[i, 2] - triangles[i, 0])[0]
        normals[i, 1] = vect_prod(triangles[i, 1] - triangles[i, 0],triangles[i, 2] - triangles[i, 0])[1]
        normals[i, 2] = vect_prod(triangles[i, 1] - triangles[i, 0],triangles[i, 2] - triangles[i, 0])[2]
    return normals


def make_facets(triangle, normal):
    facet = f'\tfacet normal {normal[0]} {normal[1]} {normal[2]}\n'
    facet += '\t\touter loop\n'
    for j in range(3):
        facet += f'\t\tvertex {triangle[j, 0]} {triangle[j, 1]} {triangle[j, 2]}\n'
    facet += '\t\tendloop\n'
    facet += '\tendfacet\n'
    return facet


def make_stl(triangles, normals = None, name = ''):
    n, m, p = triangles.shape 
    stl_ascii = f'solid {name}\n'
    if normals is None:
        normals = make_normals(triangles)
    for i in range(n):
        stl_ascii += make_facets(triangles[i], normals[i])
    stl_ascii += f'endsolid {name}'
    return stl_ascii

def tokenize(stl):
    stl = stl.replace('\t', '').replace('\n', ' ')
    stl = stl.split()
    indices = [i for i, value in enumerate(stl) if (value == 'normal') or (value == 'vertex')] #listes contenant les indices des mots 'normal' et 'vertex'
    for i in indices:
        for k in range(3):
            stl[i + k + 1] = np.float32(stl[i + k + 1])
    return stl


def parse(tokens):
    name = ''
    if tokens[1] == tokens[-1]:
        name = tokens[-1]

    #listes contenants les indices des mots 'normal' et 'vertex'
    ind_norm = [i for i, value in enumerate(tokens) if value == 'normal'] 
    ind_vertex = [i for i, value in enumerate(tokens) if value == 'vertex']

    n = tokens.count('facet') #nombre de triangles
    triangles = np.zeros((n , 3, 3), dtype=np.float32)
    normals = np.zeros((n, 3), dtype = np.float32)
    for i in ind_norm:
        normals[ind_norm.index(i)] = np.array(tokens[i+1:i+4])
    for i in ind_vertex[::3]: #chaque vertex est associ√© par 3
        triangles[ind_vertex[::3].index(i)] = np.array([tokens[i+1:i+4], tokens[i+5:i+8], tokens[i+9:i+12]])
    return triangles, normals, name

def check_positive_octant(triangles, n):
    count = 0
    for i in range(n):
        for j in range(3):
            for k in range(3):
                if triangles[i, j, k] < 0:
                    count += 1
    return (count/(3*n))*100 #renvoie le pourcentage de coordonn√©es n√©gatives des vertex

def check_normals(triangles, normals, n):
    count = 0
    for i in range(n):
        if abs(norme(normals[i]) - 1) > 0.1:
            count += 1
            continue
        if scal_prod(vect_prod(triangles[i, 1]- triangles[i, 0], triangles[i, 2] - triangles[i, 0]), normals[i]) < 0:
            count += 1
    return 100*count/n

def triangle_to_edges(triangle):
    v0, v1, v2 = map(tuple, triangle)
    return [tuple(sorted((v0, v1))), tuple(sorted((v1, v2))),tuple(sorted((v2, v0)))]


def check_shared_edge(triangles, n):
    edge_count = {}
    for i in range(n):
        triangle_edges = triangle_to_edges(triangles[i])
        for edge in triangle_edges:
            if edge in edge_count:
                edge_count[edge] += 1
            else:
                edge_count[edge] = 1
    shared_twice = sum(1 for count in edge_count.values() if count == 2)
    total_edges = len(edge_count)
    return (shared_twice/total_edges)*100

def barycenter(triangle):
    bary = np.ones(3, dtype=np.float32)
    for i in range(3):
        bary = np.float32(1/3)*bary
        for j in range(3):
            bary[i] += triangle[j, i]
    return bary


def check_ascending_rule(triangles, n):
    count = 0
    for i in range(n-1):
        if barycenter(triangles[i])[2] > barycenter(triangles[i+1])[2]:
            count +=1
    return 100*count/n


def diagnostic_stl(stl):
    tokens = tokenize(stl)
    triangles, normals, name = parse(tokens)
    n = tokens.count('facet')
    positive_score = check_positive_octant(triangles, n)
    normals_score = check_normals(triangles, normals, n)
    shared_edge_score = check_shared_edge(triangles, n)
    ascending_rule_score = check_ascending_rule(triangles, n)
    print(f'{positive_score}% des coordonn√©es sont n√©gatives.\n{normals_score}% des normales ob√©issent √† la r√®gle de la main droite et sont bien norm√©es.\n{shared_edge_score}% des ar√™tes ne sont pas pr√©sentes deux fois.\n {ascending_rule_score}% des triangles suivants sont en dessous des pr√©cedents')


def obj_to_stl(obj):
    list = obj.split('\n')
    list = list[3:]
    list = ' '.join(list)
    list = list.split('f')
    triangles = list[1:] #liste contenant les indices des sommets pour chaque triangle
    vertices = list[0].split('v') #liste contenant tous les sommets
    new_triangles = []
    for triangle in triangles:
        triangle = triangle.split()
        new_triangle = [vertices[int(triangle[0])], vertices[int(triangle[1])], vertices[int(triangle[2])]]
        triangle_final = []
        for vertex in new_triangle:
            triangle_final.append(vertex.split())
        new_triangles.append(triangle_final)
    return make_stl(np.array(new_triangles, dtype=np.float32))

#print(parse(tokenize(make_stl(square_triangles))))
#diagnostic_stl(teapot_stl)
def STL_binary_to_text(stl_filename_in, stl_filename_out):
    with open(stl_filename_in, mode="rb") as file:
        _ = file.read(80)
        n = np.fromfile(file, dtype=np.uint32, count=1)[0]
        normals = []
        faces = []
        for i in range(n):
            normals.append(np.fromfile(file, dtype=np.float32, count=3))
            faces.append(np.fromfile(file, dtype=np.float32, count=9).reshape(3, 3))
            _ = file.read(2)
    stl_text = make_stl(faces, normals)
    with open(stl_filename_out, mode="wt", encoding="utf-8") as file:
        file.write(stl_text)


demo_csg = Sphere(1) & Box(1.5)
_c = Cylinder(0.5)
demo_csg = demo_csg - (_c.orient(X) | _c.orient(Y) | _c.orient(Z))
demo_csg.save('output/demo-csg.stl', step=0.05)
